rm(list = ls())
GitLink='https://github.com/impolichetti/HW2_Repo/raw/refs/heads/main/css_G.graphml'
library(igraph)
elites=read_graph(GitLink,format='graphml')
summary(elites)
V(elites)$name=V(elites)$id
set.seed(111)
plot.igraph(elites)
unique(V(elites)$color)
V(elites)$color[V(elites)$color == ""] <- "black"
V(elites)$color[V(elites)$color == ""] <- "black"
unique(V(elites)$color)
plot.igraph(elites)
set.seed(111)
plot.igraph(elites)
transitivity(elites,type = "local")
transitivity(elites,type = "average")
clique_size_counts(elites)
largest_cliques(elites)
LCq=largest_cliques(elites)
par(mfrow = c(1, 3))
plot(elites,main='All network')
plot(induced_subgraph(elites, LCq[[1]]), main="Largest Clique  (A)")
plot(induced_subgraph(elites, LCq[[2]]), main="Largest Clique  (B)")
set.seed(123)
elites_gn <- cluster_edge_betweenness(elites,directed = F)
sizes(elites_gn)
plot(elites_gn, elites,
layout = layout_with_kk,
main="Girvan-Newman Solution")
modularity(elites, membership(elites_gn),directed = FALSE)
plot(elites_lv, elites,
layout = layout_with_kk,
main="Louvain Solution")
set.seed(321)
elites_lv <- cluster_louvain(elites)
sizes(elites_lv)
plot(elites_lv, elites,
layout = layout_with_kk,
main="Louvain Solution")
modularity(elites, membership(elites_lv),directed = FALSE)
elites_ld <- cluster_leiden(elites)
sizes(elites_ld)
set.seed(123)
elites_ld_mod <- cluster_leiden(elites,
objective_function ="modularity")
sizes(elites_ld_mod)
plot(elites_ld_mod, elites,
layout = layout_with_kk,
main="Leiden Solution-using modularity")
modularity(elites, membership(elites_ld_mod))
set.seed(123)
### Higher resolutions lead to more smaller communities,
### while lower resolutions lead to fewer larger communities.
#r = quantile(strength(actors))[2]/(gorder(actors) - 1)
r=edge_density(elites)
elites_ld_cpm <- cluster_leiden(elites,
objective_function ="CPM",
resolution_parameter = r)
sizes(elites_ld_cpm)
plot(elites_ld_cpm, elites,
layout = layout_with_kk,
main="Leiden Solution-using Pots Model")
modularity(actors, membership(actors_ld_cpm))
modularity(elites, membership(elites_ld_cpm))
modularity(elites_lv)  # Louvain
modularity(elites_leiden)  # Leiden
modularity(elites_lv)  # Louvain
modularity(elites_ld)  # Leiden
modularity(elites_lv)  # Louvain
modularity(elites_ld_mod)  # Leiden
modularity(elites_ld_mod)
elites_ld <- cluster_leiden(elites)
sizes(elites_ld)
set.seed(123)
elites_ld_mod <- cluster_leiden(elites,
objective_function ="modularity")
sizes(elites_ld_mod)
plot(elites_ld_mod, elites,
layout = layout_with_kk,
main="Leiden Solution-using modularity")
modularity(elites, membership(elites_ld_mod))
length(unique(membership(elites_ld_mod)))  # Leiden community count
length(unique(membership(elites_ld_mod)))  # Leiden community count
length(unique(membership(elites_lv)))  # Louvain community count
length(unique(membership(elites_ld_mod)))  # Leiden community count
length(unique(membership(elites_lv)))  # Louvain community count
sizes(elites_ld_mod)  # Sizes of Leiden communities
